{"version":3,"sources":["App.tsx","index.tsx"],"names":["enumType","isPerfectSquare","x","s","Math","floor","sqrt","App","useState","number","setNumber","PRIME","type","setType","result","setResult","listItems","value","label","FIBONACCI","map","option","useEffect","n","calcResult","console","log","i","isPrime","Number","className","onChange","event","target","onBlur","isNaN","round","rootElement","document","getElementById","render"],"mappings":"gLAGKA,E,6CAAAA,K,cAAAA,E,wBAAAA,M,KAML,IAWMC,EAAkB,SAACC,GACvB,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,KAAKJ,IAC/B,OAAOC,EAAIA,IAAMD,GAQJ,SAASK,IACtB,MAA4BC,mBAA0B,IAAtD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBF,mBAAmBR,EAASW,OAApD,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BL,oBAAS,GAArC,mBAAOM,EAAP,KAAeC,EAAf,KAaMC,EAXc,CAClB,CACEC,MAAOjB,EAASW,MAChBO,MAAO,WAET,CACED,MAAOjB,EAASmB,UAChBD,MAAO,gBAImBE,KAAI,SAACC,GAAD,OAChC,wBAA2BJ,MAAOI,EAAOJ,MAAzC,SACGI,EAAOH,OADGG,EAAOJ,UAyCtB,OAlBAK,qBAAU,WACR,IA7CiBC,EA6CbC,GAAa,EAEjB,GAAIf,GAAUA,EAAS,EACrB,QAAQ,GACN,KAAKG,IAASZ,EAASW,MACrBc,QAAQC,IAAI,SACZF,EApEM,SAACf,GACf,IAAK,IAAIkB,EAAI,EAAGxB,EAAIC,KAAKE,KAAKG,GAASkB,GAAKxB,EAAGwB,IAC7C,GAAIlB,EAASkB,IAAM,EACjB,OAAO,EAIX,OAAOlB,EAAS,EA6DKmB,CAAQC,OAAOpB,IAC5B,MACF,KAAKG,IAASZ,EAASmB,UArDVI,EAsDcM,OAAOpB,GAAhCe,EArDDvB,EAAgB,EAAIsB,EAAIA,EAAI,IAAMtB,EAAgB,EAAIsB,EAAIA,EAAI,GA0DnER,EAAUS,KACT,CAACf,EAAQG,IAGV,sBAAKkB,UAAU,MAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBACElB,KAAK,OACLK,MAAOR,EACPsB,SA1CmB,SAACC,GAAD,OAAgBtB,EAAUsB,EAAMC,OAAOhB,QA2C1DiB,OAzCiB,SAACF,GACxB,IAAIf,EAAQe,EAAMC,OAAOhB,MACzB,GAAIkB,MAAMlB,IAAoB,KAAVA,EAClB,OAAOP,EAAU,KAGnBO,EAAQb,KAAKgC,MAAMnB,IACP,IACVA,EAAQ,GAGVP,EAAUO,QAiCR,qBAAKa,UAAU,WAAf,SACE,wBAAQb,MAAOL,EAAMmB,SA/BF,SAACC,GAAD,OAAgBnB,EAAQmB,EAAMC,OAAOhB,QA+BxD,SACGD,MAGL,qBAAKc,UAAU,aAAf,SACE,+BAAOhB,EAAS,OAAS,eCpGjC,IAAMuB,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACjC,EAAD,IAAS8B,I","file":"static/js/main.09b66cff.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nenum enumType {\n  PRIME = \"prime\",\n  FIBONACCI = \"fibonnacci\"\n}\n\n// copy/paste\nconst isPrime = (number: number) => {\n  for (let i = 2, s = Math.sqrt(number); i <= s; i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n\n  return number > 1;\n};\n\n// copy/paste\nconst isPerfectSquare = (x: number) => {\n  const s = Math.floor(Math.sqrt(x));\n  return s * s === x;\n};\n\n// copy/paste\nconst isFibonacci = (n: number) => {\n  return isPerfectSquare(5 * n * n + 4) || isPerfectSquare(5 * n * n - 4);\n};\n\nexport default function App() {\n  const [number, setNumber] = useState<number | string>(\"\");\n  const [type, setType] = useState<enumType>(enumType.PRIME);\n  const [result, setResult] = useState(false);\n\n  const typeOptions = [\n    {\n      value: enumType.PRIME,\n      label: \"isPrime\"\n    },\n    {\n      value: enumType.FIBONACCI,\n      label: \"isFibonacci\"\n    }\n  ];\n\n  const listItems = typeOptions.map((option) => (\n    <option key={option.value} value={option.value}>\n      {option.label}\n    </option>\n  ));\n\n  const handleChangeNumber = (event: any) => setNumber(event.target.value);\n\n  const handleBlurNumber = (event: any) => {\n    let value = event.target.value;\n    if (isNaN(value) || value === \"\") {\n      return setNumber(\"\");\n    }\n\n    value = Math.round(value);\n    if (value < 0) {\n      value = 1;\n    }\n\n    setNumber(value);\n  };\n\n  const handleChangeType = (event: any) => setType(event.target.value);\n\n  useEffect(() => {\n    let calcResult = false;\n\n    if (number && number > 0) {\n      switch (true) {\n        case type === enumType.PRIME:\n          console.log(\"PRIME\");\n          calcResult = isPrime(Number(number));\n          break;\n        case type === enumType.FIBONACCI:\n          calcResult = isFibonacci(Number(number));\n          break;\n      }\n    }\n\n    setResult(calcResult);\n  }, [number, type]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"number-col\">\n        <input\n          type=\"text\"\n          value={number}\n          onChange={handleChangeNumber}\n          onBlur={handleBlurNumber}\n        />\n      </div>\n      <div className=\"type-col\">\n        <select value={type} onChange={handleChangeType}>\n          {listItems}\n        </select>\n      </div>\n      <div className=\"result-col\">\n        <span>{result ? \"true\" : \"false\"}</span>\n      </div>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}